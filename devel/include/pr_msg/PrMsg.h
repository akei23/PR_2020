// Generated by gencpp from file pr_msg/PrMsg.msg
// DO NOT EDIT!


#ifndef PR_MSG_MESSAGE_PRMSG_H
#define PR_MSG_MESSAGE_PRMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr_msg
{
template <class ContainerAllocator>
struct PrMsg_
{
  typedef PrMsg_<ContainerAllocator> Type;

  PrMsg_()
    : pick_ball(0)
    , pass_ball(0)
    , load_ball(0)
    , kick_ball(0)  {
    }
  PrMsg_(const ContainerAllocator& _alloc)
    : pick_ball(0)
    , pass_ball(0)
    , load_ball(0)
    , kick_ball(0)  {
  (void)_alloc;
    }



   typedef int32_t _pick_ball_type;
  _pick_ball_type pick_ball;

   typedef int32_t _pass_ball_type;
  _pass_ball_type pass_ball;

   typedef int32_t _load_ball_type;
  _load_ball_type load_ball;

   typedef int32_t _kick_ball_type;
  _kick_ball_type kick_ball;





  typedef boost::shared_ptr< ::pr_msg::PrMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msg::PrMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PrMsg_

typedef ::pr_msg::PrMsg_<std::allocator<void> > PrMsg;

typedef boost::shared_ptr< ::pr_msg::PrMsg > PrMsgPtr;
typedef boost::shared_ptr< ::pr_msg::PrMsg const> PrMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr_msg::PrMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr_msg::PrMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr_msg': ['/home/akei/catkin_ws/src/pr_msg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr_msg::PrMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr_msg::PrMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msg::PrMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msg::PrMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msg::PrMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msg::PrMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef8e6c4f42267afdb6b4ce014b5df775";
  }

  static const char* value(const ::pr_msg::PrMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef8e6c4f42267afdULL;
  static const uint64_t static_value2 = 0xb6b4ce014b5df775ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr_msg/PrMsg";
  }

  static const char* value(const ::pr_msg::PrMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pick_ball\n"
"int32 pass_ball\n"
"int32 load_ball\n"
"int32 kick_ball\n"
;
  }

  static const char* value(const ::pr_msg::PrMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr_msg::PrMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pick_ball);
      stream.next(m.pass_ball);
      stream.next(m.load_ball);
      stream.next(m.kick_ball);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr_msg::PrMsg_<ContainerAllocator>& v)
  {
    s << indent << "pick_ball: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pick_ball);
    s << indent << "pass_ball: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pass_ball);
    s << indent << "load_ball: ";
    Printer<int32_t>::stream(s, indent + "  ", v.load_ball);
    s << indent << "kick_ball: ";
    Printer<int32_t>::stream(s, indent + "  ", v.kick_ball);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR_MSG_MESSAGE_PRMSG_H
