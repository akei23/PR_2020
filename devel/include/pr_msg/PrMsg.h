// Generated by gencpp from file pr_msg/PrMsg.msg
// DO NOT EDIT!


#ifndef PR_MSG_MESSAGE_PRMSG_H
#define PR_MSG_MESSAGE_PRMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr_msg
{
template <class ContainerAllocator>
struct PrMsg_
{
  typedef PrMsg_<ContainerAllocator> Type;

  PrMsg_()
    : pick_slide(0)
    , pick_grasp(0)
    , pick_turn(0)
    , pick_lift(0)
    , kick_roll(0)
    , kick_fire(0)
    , pass_tee(0)  {
    }
  PrMsg_(const ContainerAllocator& _alloc)
    : pick_slide(0)
    , pick_grasp(0)
    , pick_turn(0)
    , pick_lift(0)
    , kick_roll(0)
    , kick_fire(0)
    , pass_tee(0)  {
  (void)_alloc;
    }



   typedef int32_t _pick_slide_type;
  _pick_slide_type pick_slide;

   typedef int32_t _pick_grasp_type;
  _pick_grasp_type pick_grasp;

   typedef int32_t _pick_turn_type;
  _pick_turn_type pick_turn;

   typedef int32_t _pick_lift_type;
  _pick_lift_type pick_lift;

   typedef int32_t _kick_roll_type;
  _kick_roll_type kick_roll;

   typedef int32_t _kick_fire_type;
  _kick_fire_type kick_fire;

   typedef int32_t _pass_tee_type;
  _pass_tee_type pass_tee;





  typedef boost::shared_ptr< ::pr_msg::PrMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr_msg::PrMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PrMsg_

typedef ::pr_msg::PrMsg_<std::allocator<void> > PrMsg;

typedef boost::shared_ptr< ::pr_msg::PrMsg > PrMsgPtr;
typedef boost::shared_ptr< ::pr_msg::PrMsg const> PrMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr_msg::PrMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr_msg::PrMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr_msg': ['/home/akei/catkin_ws/src/pr_msg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr_msg::PrMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr_msg::PrMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msg::PrMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr_msg::PrMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msg::PrMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr_msg::PrMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b7477fdb01b1f98d79601f95a7c0be2";
  }

  static const char* value(const ::pr_msg::PrMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b7477fdb01b1f98ULL;
  static const uint64_t static_value2 = 0xd79601f95a7c0be2ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr_msg/PrMsg";
  }

  static const char* value(const ::pr_msg::PrMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pick_slide\n"
"int32 pick_grasp\n"
"int32 pick_turn\n"
"int32 pick_lift\n"
"int32 kick_roll\n"
"int32 kick_fire\n"
"int32 pass_tee\n"
;
  }

  static const char* value(const ::pr_msg::PrMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr_msg::PrMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pick_slide);
      stream.next(m.pick_grasp);
      stream.next(m.pick_turn);
      stream.next(m.pick_lift);
      stream.next(m.kick_roll);
      stream.next(m.kick_fire);
      stream.next(m.pass_tee);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr_msg::PrMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr_msg::PrMsg_<ContainerAllocator>& v)
  {
    s << indent << "pick_slide: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pick_slide);
    s << indent << "pick_grasp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pick_grasp);
    s << indent << "pick_turn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pick_turn);
    s << indent << "pick_lift: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pick_lift);
    s << indent << "kick_roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.kick_roll);
    s << indent << "kick_fire: ";
    Printer<int32_t>::stream(s, indent + "  ", v.kick_fire);
    s << indent << "pass_tee: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pass_tee);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR_MSG_MESSAGE_PRMSG_H
